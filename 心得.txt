1.选择排序（SelectionSort）：

选择排序的时间复杂度是O(n^2)级别，具体表现在：
使用本主机的情况下，
当数据量为10000时，所用排序时间为0.102639s
当数据量为100000时，所用排序时间为10.2633s
在微小差距可忽略的前提下，呈现了O(n^2)时间复杂度的特点

2. 插入排序（InsertionSort）（未改进）：
for(int i = 1 ; i < n ; i ++)
		for(int j = i ; j > 0 && arr[j] < arr[j-1] ; j --)
			swap(arr[j], arr[j-1]);
插入排序理论上可以提前终止，算法性能应当优于选择排序，然而实际运行时，性能劣于选择排序。
原因在于，此时所使用的插入排序算法，频繁进行swap交换操作，该操作极大地影响了算法性能。

3. 插入排序（InsertionSort）（改进）：
for(int i = 1; i < n; i++){
		T e = arr[i]; // 拷贝一份当前的数组的值，寻找元素arr[i]合适的插入位置
		int j; // j保存元素e应该插入的位置
		for(j = i; j > 0 && arr[j-1] > e; j --)
			arr[j] = arr[j-1];
		arr[j] = e;
	}
1）减少了swap操作，从而大大优化了算法性能，从而体现了插入排序最大的特性：可以提前终止。
2）插入排序对于近乎有序的数组，排序性能极其强大，比nlgn级别的排序算法还要强大。
3）在完全有序的数组中，插入排序算法的时间复杂度为O(n)



